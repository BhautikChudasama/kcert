@inject CertClient _cert
@model V1Secret
@{ 
    ViewData["Title"] = "Edit Cert";
    var header = Model == null ? "New Cert" : $"Edit Cert: {Model.Namespace()} - {Model.Name()}";
    var hosts = Model == null ? new List<string>() : _cert.GetHosts(_cert.GetCert(Model));
}

<h2>@header</h2>

@if (Model != null)
{
<p>
    <a class="btn btn-info" asp-route-op="unmanage" asp-route-ns="@Model.Namespace()" asp-route-name="@Model.Name()">UnManage</a>
</p>}

<div id="HostForm" style="display: none;">
    <form method="post" asp-action="EditCert">
        <div class="form-group input-group" v-for="(h, i) in hosts">
            <input type="text" class="form-control" name="hosts[]" v-model="hosts[i]">
            <button type="button" class="btn btn-danger" @@click="Delete(i)">Delete</button>
        </div>
        <div>
            <button type="button" class="btn btn-success" @@click="Add()">Add</button>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </form>
</div>

@section Scripts {
<script src="https://unpkg.com/vue@next"></script>
<script>
    Vue.createApp({
        mounted() {
            document.getElementById('HostForm').style.display = 'block'
        },
        data() { return { hosts: @Html.Raw(JsonSerializer.Serialize(hosts)) } },
        methods: {
            Add() { this.hosts.push('') },
            Delete(idx) { this.hosts.splice(idx, 1) }
        }
    }).mount('#HostForm')

</script>
}